@page "/login"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService

<PageTitle>Войти</PageTitle>

<h3>Войти в систему</h3>

<div class="row">
    <div class="col-12 mt-5">
        <input class="form-control" @bind="_user.Name" placeholder="Логин" />
        <input class="form-control" @bind="_user.Password" placeholder="Пароль" />
        <div>
            <button class="btn btn-success" @onclick="async () => { await LoginUser(); }">Войти в систему</button>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Создаваемый пользователь.
    /// </summary>
    private UserDto _user;

    /// <summary>
    /// Инициализация компонента.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _user = new UserDto { Token = string.Empty };
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Авторизовать пользователя.
    /// </summary>
    private async Task LoginUser()
    {
        var response = await HttpClient.PostAsJsonAsync("/api/User/login", _user);
        var user = await response.Content.ReadFromJsonAsync<UserDto>();

        if (user?.IsAuthentication != true)
            return;

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(user);
        await LocalStorageService.SetItem("user", user);

        NavigationManager.NavigateTo("/", true);
    }
}