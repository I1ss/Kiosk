@page "/categories"
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>Категории</PageTitle>
<AuthorizeView Roles="Admin,Seller">
    <Authorized>
        <h3>Категории: создание, обновление, удаление.</h3>

        <div class="row">
            <div class="col-12 mt-5">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <td>Название</td>
                            <td></td>
                            <td></td>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td><input class="form-control" @bind="_newCategory.CategoryName" placeholder="Название" /></td>
                            <td class="pt-3"><a @onclick="AddCategory" href="javascript:void(0)"><i class="oi oi-plus"></i></a></td>
                            <td></td>
                        </tr>
                        @if (_categories != null && _categories.Count != 0)
                        {
                            foreach (var category in _categories)
                            {
                                <CategoryRecord Category="category" UpdateCategory="UpdateCategory" DeleteCategory="DeleteCategory" />
                            }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>К сожалению, у вас нет доступа к этой странице.</h1>
    </NotAuthorized>
</AuthorizeView>
@code {
    /// <summary>
    /// Список категорий.
    /// </summary>
    private List<CategoryDto>? _categories;

    /// <summary>
    /// Создаваемая категория.
    /// </summary>
    private CategoryDto _newCategory = new CategoryDto();

    /// <summary>
    /// Инициализация компонента.
    /// </summary>
    /// <remarks> Инициализируются здесь категории. </remarks>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await FetchCategoryList();
        StateHasChanged();
    }

    /// <summary>
    /// Инициализация категорий.
    /// </summary>
    private async Task FetchCategoryList()
    {
        _newCategory = new CategoryDto();
        var user = await LocalStorageService.GetItem<UserDto>("user");

        var request = new HttpRequestMessage(HttpMethod.Get, "/api/Category/all");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);
        var response = await HttpClient.SendAsync(request);
        _categories = await response.Content.ReadFromJsonAsync<List<CategoryDto>>();
    }

    /// <summary>
    /// Создание категории.
    /// </summary>
    private async Task AddCategory()
    {
        _newCategory.Brands ??= new List<BrandDto>();
        var user = await LocalStorageService.GetItem<UserDto>("user");
        var request = new HttpRequestMessage(HttpMethod.Post, "/api/Category");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);
        request.Content = new StringContent(JsonSerializer.Serialize(_newCategory), Encoding.UTF8, "application/json");

        var response = await HttpClient.SendAsync(request);
        await FetchCategoryList();
        _newCategory = new CategoryDto();
    }

    /// <summary>
    /// Обновление категории.
    /// </summary>
    /// <param name="category"> Обновляемая категория. </param>
    private async Task UpdateCategory(CategoryDto category)
    {
        category.Brands ??= new List<BrandDto>();
        var user = await LocalStorageService.GetItem<UserDto>("user");
        var request = new HttpRequestMessage(HttpMethod.Put, "/api/Category");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);
        request.Content = new StringContent(JsonSerializer.Serialize(category), Encoding.UTF8, "application/json");

        var response = await HttpClient.SendAsync(request);
        await FetchCategoryList();
    }

    /// <summary>
    /// Удаление категории.
    /// </summary>
    /// <param name="categoryId"> Идентификатор удаляемой категории. </param>
    private async Task DeleteCategory(int categoryId)
    {
        var user = await LocalStorageService.GetItem<UserDto>("user");
        var request = new HttpRequestMessage(HttpMethod.Delete, $"/api/Category/{categoryId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);

        var response = await HttpClient.SendAsync(request);
        await FetchCategoryList();
    }
}
