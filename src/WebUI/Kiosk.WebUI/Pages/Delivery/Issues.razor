@page "/issues"
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>Задания</PageTitle>

<AuthorizeView Roles="Admin,Courier">
    <Authorized>
        <h1 align="center">Задания на доставку</h1>
        <hr />

        @if (_issues != null)
        {
            @foreach (var issue in _issues)
            {
                <h3>@issue.OrderStatus</h3>
                <h4>@issue.TotalPrice/@issue.Payment</h4>
                <border>
                    <h4>Продукты:</h4>
                    <div class="row row-cols-3 col-md-12 text-center">
                        @foreach (var product in issue.Products)
                        {
                            <div class="col" style="padding: 10px;">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">@product.ProductName</h5>
                                    </div>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">Стоимость: @product.ProductPrice ₽</li>
                                        <li class="list-group-item">Код продукта: @product.ProductCode</li>
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="card-body">
                        <button class="btn btn-success" @onclick="(async() => await CompleteOrder(issue))">Доставить заказ</button>
                        <button class="btn btn-danger" @onclick="(async () => await CancelOrder(issue))">Вернуть заказ</button>
                    </div>
                </border>
            }
        }
    </Authorized>
    <NotAuthorized>
        <h1>К сожалению, у вас нет доступа к этой странице.</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    /// <summary>
    /// Задания.
    /// </summary>
    private IEnumerable<IssueDto>? _issues;
    
    /// <summary>
    /// Инициализация компонента.
    /// </summary>
    /// <remarks> Инициализируются здесь задания. </remarks>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await FetchIssueList();
        StateHasChanged();
    }

    /// <summary>
    /// Инициализация заданий.
    /// </summary>
    private async Task FetchIssueList()
    {
        var user = await LocalStorageService.GetItem<UserDto>("user");
        var request = new HttpRequestMessage(HttpMethod.Get, "api/issue/all");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);

        var response = await HttpClient.SendAsync(request);
        _issues = await response.Content.ReadFromJsonAsync<IEnumerable<IssueDto>>();
    }

    /// <summary>
    /// Отменить заказ задания.
    /// </summary>
    /// <param name="issue"> Задание. </param>
    private async Task CancelOrder(IssueDto issue)
    {
        var user = await LocalStorageService.GetItem<UserDto>("user");
        var request = new HttpRequestMessage(HttpMethod.Put, "api/issue/cancel-order");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);
        request.Content = new StringContent(JsonSerializer.Serialize(issue), Encoding.UTF8, "application/json");

        var response = await HttpClient.SendAsync(request);
        await FetchIssueList();
    }

    /// <summary>
    /// Доставить (завершить) заказ задания.
    /// </summary>
    /// <param name="issue"> Задание. </param>
    private async Task CompleteOrder(IssueDto issue)
    {
        var user = await LocalStorageService.GetItem<UserDto>("user");
        var request = new HttpRequestMessage(HttpMethod.Put, "api/issue/completed-order");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token);
        request.Content = new StringContent(JsonSerializer.Serialize(issue), Encoding.UTF8, "application/json");

        var response = await HttpClient.SendAsync(request);
        await FetchIssueList();
    }
}